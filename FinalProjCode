##Question 1 Use yfinance to Extract Stock Data

Tesla = yf.Ticker("TSLA")
Tesla

Tesla_data = Tesla.history(period="max")
Tesla_data

Tesla_data.reset_index(inplace=True)
Tesla_data.head()

##Question 2 Use Webscraping to Extract Tesla Revenue Data

URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(URL).text
print(html_data)

soup = BeautifulSoup(html_data, 'html.parser')

read_html_pandas_data = pd.read_html(URL)
tesla_revenue = read_html_pandas_data[1]
tesla_revenue.columns = ["Date", "Revenue"]

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")

tesla_revenue.dropna(inplace=True)

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

tesla_revenue.tail()

##Question 3: Use yfinance to Extract Stock Data

gme_data.reset_index(inplace=True)
gme_data.head()

##Question 4: Use Webscraping to Extract GME Revenue Data

URL1 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_2 = requests.get(URL1).text
print(html_data_2)

soup = BeautifulSoup(html_data_2, 'html.parser')

read_html_pandas_data = pd.read_html(URL1)
gme_revenue = read_html_pandas_data[1]
gme_revenue.columns = ["Date", "Revenue"]

gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"")

gme_revenue.tail()

##Question 5: Plot Tesla Stock Graph

def make_graph(Tesla_share_price_data, tesla_revenue, stockdata):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Tesla Historical Share Price", "TeslaHistorical Revenue"), vertical_spacing = .3)
    stock_data_specific = Tesla_share_price_data[Tesla_share_price_data.Date <= '2021-06-14']
    revenue_data_specific = tesla_revenue[tesla_revenue.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(Tesla_share_price_data.Date, infer_datetime_format=True), y=stockdata.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(tesla_revenue.Date, infer_datetime_format=True), y=tesla_revenue.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stockdata,
    xaxis_rangeslider_visible=True)
    fig.show()

##Question 6: Plot GameStop Stock Graph

def make_graph(gme_data, gme_revenue, GameStop):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Gamestop Historical Share Price", "Gamestop Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = gme_data[gme_data.Date <= '2021-06-14']
    revenue_data_specific = gme_revenue[gme_revenue.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=GameStop,
    xaxis_rangeslider_visible=True)
    fig.show()
